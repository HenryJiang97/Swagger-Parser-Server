---
swagger: "2.0"
info:
  description: "This design document is for swagger API service, including validate and upload API spec files, download existing raw API spec files. Also, this system offers basic info and paths parsing for existing specs. This system currently supports both JSON and YAML files."
  version: "1.0.0"
  title: "Swagger Parser"
host: "localhost:5000"
basePath: "/"
tags:
- name: "Spec"
  description: "Swagger specifications"
- name: "Parser"
  description: "Swagger spec parser"
schemes:
- "https"
- "http"
paths:
  /swaggerspec:
    get:
      tags:
      - "Spec"
      summary: "List all specs existing in database."
      operationId: "swaggerspec_get"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PeekData"
        "500":
          description: "Database connection error"
          schema:
            $ref: "#/definitions/Error"
        "503":
          description: "Service unavailable"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.spec_controller"
    post:
      tags:
      - "Spec"
      summary: "Upload .yaml / .json file, validate and save swagger spec to database."
      operationId: "swaggerspec_post"
      consumes:
        - "multipart/form-data"
      parameters:
        - name: "upfile"
          in: "formData"
          description: "The file to upload."
          required: false
          type: "file"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SpecId"
        "400":
          description: "Invalid spec"
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "Duplicate file"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Database connection error"
          schema:
            $ref: "#/definitions/Error"
        "503":
          description: "Service unavailable"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.spec_controller"
    delete:
      tags:
      - "Spec"
      summary: "Delete all files existing in database."
      operationId: "swaggerspec_delete"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Success"
        "500":
          description: "Database connection error"
          schema:
            $ref: "#/definitions/Error"
        "503":
          description: "Service unavailable"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.spec_controller"
  /swaggerspec/{id}:
    get:
      tags:
      - "Spec"
      summary: "Get raw file by id from database."
      operationId: "swaggerspec_id_get"
      parameters:
      - name: "id"
        in: "path"
        description: "File unique id"
        required: true
        type: "string"
        format: "uuid"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SwaggerSpec"
        "404":
          description: "File not found"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Database connection error"
          schema:
            $ref: "#/definitions/Error"
        "503":
          description: "Service unavailable"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.spec_controller"
    put:
      tags:
      - "Spec"
      summary: "Update spec file by id from database."
      operationId: "swaggerspec_id_put"
      consumes:
        - "multipart/form-data"
      parameters:
      - name: "id"
        in: "path"
        description: "File unique id"
        required: true
        type: "string"
        format: "uuid"
      - name: "upfile"
        in: "formData"
        description: "The file to upload."
        required: false
        type: "file"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Success"
        "400":
          description: "Invalid spec"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "File not found"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Database connection error"
          schema:
            $ref: "#/definitions/Error"
        "503":
          description: "Service unavailable"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.spec_controller"
    delete:
      tags:
      - "Spec"
      summary: "Delete spec file by id from database."
      operationId: "swaggerspec_id_delete"
      parameters:
      - name: "id"
        in: "path"
        description: "File unique id"
        required: true
        type: "string"
        format: "uuid"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Success"
        "404":
          description: "File not found"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Database connection error"
          schema:
            $ref: "#/definitions/Error"
        "503":
          description: "Service unavailable"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.spec_controller"
  /swaggerspec/{id}/parse/info:
    get:
      tags:
        - "Parser"
      summary: "Parse spec info"
      operationId: "parse_info_id_get"
      parameters:
        - name: "id"
          in: "path"
          description: "File unique id"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "Parse successful"
          schema:
            $ref: "#/definitions/Info"
        "400":
          description: "Parse exception"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "File not found"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Database connection error"
          schema:
            $ref: "#/definitions/Error"
        "503":
          description: "Service unavailable"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.parser_controller"
  /swaggerspec/{id}/parse/paths:
    get:
      tags:
        - "Parser"
      summary: "Parse spec paths"
      operationId: "parse_paths_id_get"
      parameters:
        - name: "id"
          in: "path"
          description: "File unique id"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "Parse successful"
          schema:
            $ref: "#/definitions/Paths"
        "400":
          description: "Parse exception"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "File not found"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Database connection error"
          schema:
            $ref: "#/definitions/Error"
        "503":
          description: "Service unavailable"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.parser_controller"
definitions:
  SwaggerSpec:
    type: "object"
    required:
    - "paths"
    properties:
      info:
        type: "object"
        properties: {}
      paths:
        type: "object"
        properties: {}
      swagger:
        type: "string"
      host:
        type: "string"
      schemes:
        type: "array"
        items:
          type: "string"
      basePath:
        type: "string"
      securityDefinitions:
        type: "object"
        properties: {}
      produces:
        type: "array"
        items:
          type: "string"
      definitions:
        type: "object"
        properties: {}
      openapi:
        type: "string"
      servers:
        type: "array"
        items:
          type: "object"
          properties: {}
      components:
        type: "object"
        properties: {}
    example:
      components: "{}"
      servers:
      - "{}"
      - "{}"
      basePath: "basePath"
      openapi: "openapi"
      paths: "{}"
      host: "host"
      produces:
      - "produces"
      - "produces"
      schemes:
      - "schemes"
      - "schemes"
      securityDefinitions: "{}"
      definitions: "{}"
      swagger: "swagger"
      info: "{}"
  Info:
    type: "object"
    required:
      - "title"
      - "version"
    properties:
      title:
        type: "string"
      version:
        type: "string"
      description:
        type: "string"
    example:
      title: "title"
      version: "1.0.0"
      description: "description"
  Paths:
    type: "object"
  PeekData:
    type: "object"
    required:
    - "id"
    - "name"
    - "version"
    properties:
      id:
        $ref: "#/definitions/SpecId"
      name:
        type: "string"
        description: "File name"
      version:
        type: "string"
        description: "File version"
    example:
      name: "name"
      id: {}
      version: "version"
  SpecId:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "string"
        format: "uuid"
  Success:
    type: "object"
    required:
    - "SuccessMessage"
    properties:
      SuccessMessage:
        type: "string"
    example:
      SuccessMessage: "SuccessMessage"
  Error:
    type: "object"
    required:
    - "ErrorMessage"
    properties:
      ErrorMessage:
        type: "string"
