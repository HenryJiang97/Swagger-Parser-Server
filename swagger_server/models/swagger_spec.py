from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SwaggerSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, info: object=None, paths: object=None, swagger: str=None, host: str=None, schemes: List[str]=None, base_path: str=None, security_definitions: object=None, produces: List[str]=None, definitions: object=None, openapi: str=None, servers: List[object]=None, components: object=None):  # noqa: E501
        """SwaggerSpec - a model defined in Swagger

        :param info: The info of this SwaggerSpec.  # noqa: E501
        :type info: object
        :param paths: The paths of this SwaggerSpec.  # noqa: E501
        :type paths: object
        :param swagger: The swagger of this SwaggerSpec.  # noqa: E501
        :type swagger: str
        :param host: The host of this SwaggerSpec.  # noqa: E501
        :type host: str
        :param schemes: The schemes of this SwaggerSpec.  # noqa: E501
        :type schemes: List[str]
        :param base_path: The base_path of this SwaggerSpec.  # noqa: E501
        :type base_path: str
        :param security_definitions: The security_definitions of this SwaggerSpec.  # noqa: E501
        :type security_definitions: object
        :param produces: The produces of this SwaggerSpec.  # noqa: E501
        :type produces: List[str]
        :param definitions: The definitions of this SwaggerSpec.  # noqa: E501
        :type definitions: object
        :param openapi: The openapi of this SwaggerSpec.  # noqa: E501
        :type openapi: str
        :param servers: The servers of this SwaggerSpec.  # noqa: E501
        :type servers: List[object]
        :param components: The components of this SwaggerSpec.  # noqa: E501
        :type components: object
        """
        self.swagger_types = {
            'info': object,
            'paths': object,
            'swagger': str,
            'host': str,
            'schemes': List[str],
            'base_path': str,
            'security_definitions': object,
            'produces': List[str],
            'definitions': object,
            'openapi': str,
            'servers': List[object],
            'components': object
        }

        self.attribute_map = {
            'info': 'info',
            'paths': 'paths',
            'swagger': 'swagger',
            'host': 'host',
            'schemes': 'schemes',
            'base_path': 'basePath',
            'security_definitions': 'securityDefinitions',
            'produces': 'produces',
            'definitions': 'definitions',
            'openapi': 'openapi',
            'servers': 'servers',
            'components': 'components'
        }

        self._info = info
        self._paths = paths
        self._swagger = swagger
        self._host = host
        self._schemes = schemes
        self._base_path = base_path
        self._security_definitions = security_definitions
        self._produces = produces
        self._definitions = definitions
        self._openapi = openapi
        self._servers = servers
        self._components = components

    @classmethod
    def from_dict(cls, dikt) -> 'SwaggerSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SwaggerSpec of this SwaggerSpec.  # noqa: E501
        :rtype: SwaggerSpec
        """
        return util.deserialize_model(dikt, cls)

    @classmethod
    def to_dict(cls, spec) -> 'dict':
        api_version = spec.swagger if spec.swagger is not None else spec.openapi
        if "2.0" <= api_version < "3.0":
            return {
                "swagger": spec.swagger,
                "info": spec.info,
                "host": spec.host,
                "schemes": spec.schemes,
                "basePath": spec.base_path,
                "securityDefinitions": spec.security_definitions,
                "produces": spec.produces,
                "paths": spec.paths,
                "definitions": spec.definitions
            }
        else:
            return {
                "openapi": spec.openapi,
                "info": spec.info,
                "servers": spec.servers,
                "paths": spec.paths,
                "components": spec.components
            }

    @property
    def info(self) -> object:
        """Gets the info of this SwaggerSpec.


        :return: The info of this SwaggerSpec.
        :rtype: object
        """
        return self._info

    @info.setter
    def info(self, info: object):
        """Sets the info of this SwaggerSpec.


        :param info: The info of this SwaggerSpec.
        :type info: object
        """

        self._info = info

    @property
    def paths(self) -> object:
        """Gets the paths of this SwaggerSpec.


        :return: The paths of this SwaggerSpec.
        :rtype: object
        """
        return self._paths

    @paths.setter
    def paths(self, paths: object):
        """Sets the paths of this SwaggerSpec.


        :param paths: The paths of this SwaggerSpec.
        :type paths: object
        """
        if paths is None:
            raise ValueError("Invalid value for `paths`, must not be `None`")  # noqa: E501

        self._paths = paths

    @property
    def swagger(self) -> str:
        """Gets the swagger of this SwaggerSpec.


        :return: The swagger of this SwaggerSpec.
        :rtype: str
        """
        return self._swagger

    @swagger.setter
    def swagger(self, swagger: str):
        """Sets the swagger of this SwaggerSpec.


        :param swagger: The swagger of this SwaggerSpec.
        :type swagger: str
        """

        self._swagger = swagger

    @property
    def host(self) -> str:
        """Gets the host of this SwaggerSpec.


        :return: The host of this SwaggerSpec.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host: str):
        """Sets the host of this SwaggerSpec.


        :param host: The host of this SwaggerSpec.
        :type host: str
        """

        self._host = host

    @property
    def schemes(self) -> List[str]:
        """Gets the schemes of this SwaggerSpec.


        :return: The schemes of this SwaggerSpec.
        :rtype: List[str]
        """
        return self._schemes

    @schemes.setter
    def schemes(self, schemes: List[str]):
        """Sets the schemes of this SwaggerSpec.


        :param schemes: The schemes of this SwaggerSpec.
        :type schemes: List[str]
        """

        self._schemes = schemes

    @property
    def base_path(self) -> str:
        """Gets the base_path of this SwaggerSpec.


        :return: The base_path of this SwaggerSpec.
        :rtype: str
        """
        return self._base_path

    @base_path.setter
    def base_path(self, base_path: str):
        """Sets the base_path of this SwaggerSpec.


        :param base_path: The base_path of this SwaggerSpec.
        :type base_path: str
        """

        self._base_path = base_path

    @property
    def security_definitions(self) -> object:
        """Gets the security_definitions of this SwaggerSpec.


        :return: The security_definitions of this SwaggerSpec.
        :rtype: object
        """
        return self._security_definitions

    @security_definitions.setter
    def security_definitions(self, security_definitions: object):
        """Sets the security_definitions of this SwaggerSpec.


        :param security_definitions: The security_definitions of this SwaggerSpec.
        :type security_definitions: object
        """

        self._security_definitions = security_definitions

    @property
    def produces(self) -> List[str]:
        """Gets the produces of this SwaggerSpec.


        :return: The produces of this SwaggerSpec.
        :rtype: List[str]
        """
        return self._produces

    @produces.setter
    def produces(self, produces: List[str]):
        """Sets the produces of this SwaggerSpec.


        :param produces: The produces of this SwaggerSpec.
        :type produces: List[str]
        """

        self._produces = produces

    @property
    def definitions(self) -> object:
        """Gets the definitions of this SwaggerSpec.


        :return: The definitions of this SwaggerSpec.
        :rtype: object
        """
        return self._definitions

    @definitions.setter
    def definitions(self, definitions: object):
        """Sets the definitions of this SwaggerSpec.


        :param definitions: The definitions of this SwaggerSpec.
        :type definitions: object
        """

        self._definitions = definitions

    @property
    def openapi(self) -> str:
        """Gets the openapi of this SwaggerSpec.


        :return: The openapi of this SwaggerSpec.
        :rtype: str
        """
        return self._openapi

    @openapi.setter
    def openapi(self, openapi: str):
        """Sets the openapi of this SwaggerSpec.


        :param openapi: The openapi of this SwaggerSpec.
        :type openapi: str
        """

        self._openapi = openapi

    @property
    def servers(self) -> List[object]:
        """Gets the servers of this SwaggerSpec.


        :return: The servers of this SwaggerSpec.
        :rtype: List[object]
        """
        return self._servers

    @servers.setter
    def servers(self, servers: List[object]):
        """Sets the servers of this SwaggerSpec.


        :param servers: The servers of this SwaggerSpec.
        :type servers: List[object]
        """

        self._servers = servers

    @property
    def components(self) -> object:
        """Gets the components of this SwaggerSpec.


        :return: The components of this SwaggerSpec.
        :rtype: object
        """
        return self._components

    @components.setter
    def components(self, components: object):
        """Sets the components of this SwaggerSpec.


        :param components: The components of this SwaggerSpec.
        :type components: object
        """

        self._components = components
